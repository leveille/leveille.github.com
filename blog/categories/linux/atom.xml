<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Jason Leveille]]></title>
  <link href="http://jasonleveille.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://jasonleveille.com/"/>
  <updated>2013-06-03T16:29:02-04:00</updated>
  <id>http://jasonleveille.com/</id>
  <author>
    <name><![CDATA[Jason Leveille]]></name>
    <email><![CDATA[i@leve.us]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debian & Ubuntu: Adding a StartUp Script]]></title>
    <link href="http://jasonleveille.com/blog/2013/01/debian-ubuntu-adding-a-startup-script/"/>
    <updated>2013-01-15T07:39:00-05:00</updated>
    <id>http://jasonleveille.com/blog/2013/01/debian-ubuntu-adding-a-startup-script</id>
    <content type="html"><![CDATA[<p>I recently had the need to run some code with each server restart.  <a href="http://manpages.ubuntu.com/manpages/precise/en/man8/update-rc.d.8.html">update-rc.d</a> provides a great and easy way execute your own code on server startup (in my case, Ubuntu 12.04).</p>

<!--more-->


<p>As root, create your script:</p>

<p>```bash spaghetti.sh</p>

<h1>!/bin/sh</h1>

<p>mkdir /tmp/spaghetti &amp;&amp; touch /tmp/spaghetti/meatballs.txt<br/>
```</p>

<p>Make the script executable:</p>

<p><code>bash
root@cameron ~ % chmod +x spaghetti.sh
</code></p>

<p>Add your script to <code>/etc/init.d</code>:</p>

<p><code>bash
root@cameron ~ % mv spaghetti.sh /etc/init.d
</code></p>

<p>Run <code>update-rc.d</code> on the new script:</p>

<p><code>bash
root@cameron ~ % update-rc.d spaghetti.sh defaults
</code></p>

<p>So, what is the <code>defaults</code> argument?</p>

<p><blockquote><p>If  defaults  is  used  then  update-rc.d  will make links to start the service in runlevels 2345 and to stop the service in runlevels 016.</p><footer><strong>Ubuntu Manuals</strong> <cite>Installing Init Script Links</cite></footer></blockquote></p>

<p>Here&rsquo;s a great article describing runlevels in exhausting detail:</p>

<p><blockquote><p>And what is a runlevel? You might assume that this refers to different levels that the system goes through during a boot up. Instead, think of the runlevel as the point at which the system is entered. Runlevel 1 is the most basic configuration (simple single user access using an text interface), while runlevel 5 is the most advanced (multi-user, networking, and a GUI front end). Runlevels 0 and 6 are used for halting and rebooting the system.</p><footer><strong>linux.com</strong> <cite>An Introduction to Services</cite></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux: Extending a Logical Volume]]></title>
    <link href="http://jasonleveille.com/blog/2013/01/linux-extending-logical-volume/"/>
    <updated>2013-01-14T12:07:00-05:00</updated>
    <id>http://jasonleveille.com/blog/2013/01/linux-extending-logical-volume</id>
    <content type="html"><![CDATA[<p>One of the servers I&rsquo;m working with started running out of disk space recently.  The machine is running on a Ubuntu VM in Windows, about 200 miles from my desk.  I have remote access to the VM, but I don&rsquo;t have access to the virtualization software.  After requesting a disk resize through the IT company that manages our Windows network, here&rsquo;s what I saw:</p>

<!--more-->


<p><code>bash
root@outlays:~# df -h
Filesystem                Size  Used Avail Use% Mounted on
/dev/mapper/outlays-root   14G   14G    0G 100% /
...
</code></p>

<p>The request I made was to increase the disk space from 14G to ~40G.  That additional space doesn&rsquo;t show up, as it&rsquo;s free space on the disk (it hasn&rsquo;t yet been assigned to a volume).  Running the <code>vgdisplay</code> will show the additional space (<strong>Free  PE / Size</strong>):</p>

<p><code>bash http://linux.die.net/man/8/vgdisplay
root@outlays:~# vgdisplay
  --- Volume group ---
  VG Name               outlays
  ...
  VG Size               39.76 GiB
  Free  PE / Size       6412 / 25.05 GiB
</code></p>

<p>So, the disk was expanded, however I needed to assign that free space to /dev/mapper/outlays-root &hellip; I wasn&rsquo;t sure how.  A bit of Googling brought me to this article: <a href="http://www.dbvisit.com/forums/showthread.php?t=343">Extending LVM disks in Linux using VMWare virtual disks</a>.  The solution seemed to be to extend the /dev/mapper/outlays-root by the amount of freespace available in the volume group.  First, I wanted to check out the /dev/mapper/outlays-root disk:</p>

<p><code>bash http://linux.die.net/man/8/parted
root@outlays:~# parted
(parted) print all
...
Model: Linux device-mapper (linear) (dm)
Disk /dev/mapper/outlays-root: 14GB
Sector size (logical/physical): 512B/512B
Partition Table: loop
...
</code></p>

<p>And running the <code>lvdisplay</code> command shows the following:</p>

<p><code>bash http://linux.die.net/man/8/lvdisplay
root@outlays:~# lvdisplay
  --- Logical volume ---
  LV Name                /dev/outlays/root
  VG Name                outlays
  ...
  LV Size                14 GiB
</code></p>

<p>So, the assumption I made here was the /dev/mapper/outlays-root maps to /dev/outlays/root.  Alright, I needed to expand /dev/outlays/root.  Expanding the disk was as simple as running the following commands:</p>

<p><code>bash http://linux.die.net/man/8/lvextend
lvextend -L+25G /dev/outlays/root
</code></p>

<p><code>bash http://linux.die.net/man/8/resize2fs
resize2fs /dev/outlays/root
</code></p>

<p>Now, here&rsquo;s the amount of disk space I have:</p>

<p><code>
root@outlays:~# df -h
Filesystem                Size  Used Avail Use% Mounted on
/dev/mapper/outlays-root   39G  8.7G   28G  24% /
...
</code></p>

<p>Much better.</p>
]]></content>
  </entry>
  
</feed>
